openapi: 3.0.3

info:
  title: Film Manager
  version: 1.0.11
tags:
  - name: films
  - name: user

# Root API
paths:
  /api/:
    get:
      tags:
        - films
      summary: Top level API endpoint
      description:
        It returns you a list with
        some useful service endpoints URLs
      operationId: 
        root
      responses:
        "200":
          description: The requested films
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    type: array
                    items:
                      type: object
                      properties:
                        rel:
                          type: string
                        href:
                          type: string
# Private films getters APIs
  /api/films/private:
    get:
      tags:
        - films
      summary: 
        Fetch all films marked as private
      operationId: 
        publicFilms
      responses:
        '200':
          description: Private films in the database
          # Since the list of private films may be huge,
          # please adopt the pagination, i.e. returning
          # a limited number of results
          content:
            application/json:
              schema:
                type: object
                properties:
                  metatadata:
                    type: object
                    properties:
                      total: # How many items the database has stored
                       type: integer
                      count: # How many items are returned in the response
                        type: integer 
                      limit: # How many items the client wants to see
                        type: integer
                      offset: # From which item the client wants to see the items
                        type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Film'
  /api/films/private/{fid}:
    get:
      tags:
        - films
      summary: Fetch a particular film
      operationId: privateFilm
      parameters:
        - name: fid
          in: path
          description: Film ID (the one to return)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The requested film
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'  
        '401':
          description: Authorization information is missing or invalid
          content:
            text/plain:
              schema:
                type: string        
        '404':
          description: Film not found
  /api/films/private/{fid}/reviews:
    get:
      tags:
        - films
      summary: 
        Fetch all reviews associated to a film marked as private
      operationId: reviewsPrivateFilm
      parameters:
        - name: fid
          in: path
          description: 
            Film ID (the one whose whose reviews are requested)
          required: true
          schema:
            type: string
      responses:
        '200':
          description:
            Reviews associated to that film in the database
          content:
            application/json:
              # Since the list of reviews may be huge,
              # please adopt the pagination, i.e. returning
              # a limited number of results
              schema:
                type: object
                properties:
                  metatadata:
                    type: object
                    properties:
                      total: # How many items the database has stored
                       type: integer
                      count: # How many items are returned in the response
                        type: integer 
                      limit: # How many items the client wants to see
                        type: integer
                      offset: # From which item the client wants to see the items
                        type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'      
        '404':
         description: Film not found    
  /api/films/private/{fid}/reviews/{uid}:
    get:
      tags:
        - films
      summary:
        Fetch a particular review for a film marked as private
      operationId: 
        getReviewPublicFilm
      parameters:
        - name: fid
          in: path
          description: Film ID (the one whose review is requested)
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: User ID (the one whose review is requested)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 
            The requested review
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Review'        
        '404':
         description: Review not found
# Public films getters APIs
  /api/films/public:
    get:
      tags:
        - films
      summary: 
        Fetch all films marked as public
      operationId: 
        publicFilms
      responses:
        '200':
          description: Public films in the database
          # Since the list of public films may be huge,
          # please adopt the pagination, i.e. returning
          # a limited number of results
          content:
            application/json:
              schema:
                type: object
                properties:
                  metatadata:
                    type: object
                    properties:
                      total: # How many items the database has stored
                       type: integer
                      count: # How many items are returned in the response
                        type: integer 
                      limit: # How many items the client wants to see
                        type: integer
                      offset: # From which item the client wants to see the items
                        type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Film'
  /api/films/public/{fid}:
    get:
      tags:
        - films
      summary: 
        Fetch a particular film marked as public
      operationId: 
        publicFilm
      parameters:
        - name: fid
          in: path
          description: 
            Film ID (the one to return)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Public film in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'          
        '404':
          description: Film not found  
  /api/films/public/{fid}/reviews:
    get:
      tags:
        - films
      summary: 
        Fetch all reviews associated to a film marked as public
      operationId: reviewsPublicFilm
      parameters:
        - name: fid
          in: path
          description: 
            Film ID (the one whose whose reviews are requested)
          required: true
          schema:
            type: string
      responses:
        '200':
          description:
            Reviews associated to that film in the database
          content:
            application/json:
              # Since the list of reviews may be huge,
              # please adopt the pagination, i.e. returning
              # a limited number of results
              schema:
                type: object
                properties:
                  metatadata:
                    type: object
                    properties:
                      total: # How many items the database has stored
                       type: integer
                      count: # How many items are returned in the response
                        type: integer 
                      limit: # How many items the client wants to see
                        type: integer
                      offset: # From which item the client wants to see the items
                        type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'       
        '404':
         description: Film not found    
  /api/films/public/{fid}/reviews/{uid}:
    get:
      tags:
        - films
      summary:
        Fetch a particular review for a film marked as public
      operationId: 
        getReviewPublicFilm
      parameters:
        - name: fid
          in: path
          description: Film ID (the one whose whose review is requested)
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: User ID (the one whose whose review is requested)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 
            The requested review
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Review'        
        '404':
         description: Review not found

# Write and delete films APIs
  /api/films:
    post:
      tags:
        - films
      summary: 
        Create a new film
      operationId: newFilm
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/New Film Request Body'
      responses:
        '200':
          description: 
            New film in database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'
        '401':
          description: 
            Authorization information is missing or invalid
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: 
            Bad request
          content:
            text/plain:
              schema:
                type: string
  /api/films/{fid}:
    put:
      tags:
        - films
      summary: 
        Edit a film
      operationId: 
        editFilm
      parameters:
        - name: fid
          in: path
          description: Film ID (the one to edit)
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Film'
      responses:
        '200':
          description: The updated film resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'          
        '204':
          description: 
            No content
        '400':
          description: 
            Bad request
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: 
            Authorization information is missing or invalid
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Film not found
    delete:
      tags:
        - films
      summary: 
        Delete a film
      operationId: 
        deleteFilm
      parameters:
        - name: fid
          in: path
          description: 
            Film ID (the one to delete)
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 
            No content
        '400':
          description: 
            Bad request
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: 
            Authorization information is missing or invalid
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Film not found

# High-level getters films APIs
  /api/films/created:
    get:
      tags:
        - films
      summary: 
        Fetch all films created the authenticated user has created
      operationId: createdFilms
      responses:
        '200':
          description: 
            The requested films
          # Since the list of films may be huge,
          # please adopt the pagination, i.e. returning
          # a limited number of results
          content:
            application/json:
              schema:
                type: object
                properties:
                  metatadata:
                    type: object
                    properties:
                      total: # How many items the database has stored
                       type: integer
                      count: # How many items are returned in the response
                        type: integer 
                      limit: # How many items the client wants to see
                        type: integer
                      offset: # From which item the client wants to see the items
                        type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Film'             
  /api/films/invited-to-review:
    get:
      tags:
        - films
      summary: 
        Fetch all films to which the authenticated user has been invited to review
      operationId: filmsToReview
      responses:
        '200':
          description: 
            The requested films
          # Since the list of films may be huge,
          # please adopt the pagination, i.e. returning
          # a limited number of results
          content:
            application/json:
              schema:
                type: object
                properties:
                  metatadata:
                    type: object
                    properties:
                      total: # How many items the database has stored
                       type: integer
                      count: # How many items are returned in the response
                        type: integer 
                      limit: # How many items the client wants to see
                        type: integer
                      offset: # From which item the client wants to see the items
                        type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Film'    


# Users related APIs
  /api/user/auth:
    post:
      tags:
        - user
      summary: Login the user
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login Request Body' 
      responses:
        '200':
          description: User sucessfully logged-in
        '400':
          description: Invalid username/password supplied
  /api/user/no-auth:
    post:
      tags:
        - user
      summary: Logout the user
      operationId: logout
      responses:
        '200':
          description: User sucessfully logged-out

# Reviews related APIs
  /api/reviews:
    post:
      tags:
        - reviews
      summary: 
        Create a new review
      operationId: 
        newReview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '200':
          description: 
           New review in database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '401':
          description:
            Authorization information is missing or invalid
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: 
            Bad request
          content:
            text/plain:
              schema:
                type: string  
  /api/reviews/{fid}/{uid}:
    put:
      tags:
        - reviews
      summary: 
        Edit a review
      operationId: 
        editReview
      parameters:
        - name: fid
          in: path
          description: Film ID (the one whose review is requested)
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: Owner ID (the one whose review is requested)
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '200':
          description: The updated review resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'          
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Authorization information is missing or invalid
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Film not found
    delete:
      tags:
        - reviews
      summary: 
        Delete a review
      operationId: 
        deleteReview
      parameters:
        - name: fid
          in: path
          description: Film ID (the one whose review is requested)
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: Owner ID (the one whose review is requested)
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content
        '400':
          description: Bad request
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Authorization information is missing or invalid
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Film not found

components:
  schemas:
    Film:
      type: object
      properties:
        fid:
          type: string
        title:
          type: string
        owner:
          type: string
        private:
          type: boolean
        watchDate:
          type: string
          format: date
        rating:
          type: integer
          minimum: 0
          maximum: 10
        favorite:
          type: boolean
          default: false
      required:
        - id
        - owner
        - private
    Review:
      type: object
      properties:
        fid:
          type: string
        uid:
          type: string
        completed:
          type: boolean
        reviewDate:
          type: string
          format: date
        rating:
          type: integer
          minimum: 0
          maximum: 10
        text:
          type: string
          maxLength: 1000
      required:
        - id
        - reviewerID
        - completed
    User:
      type: object
      properties:
        uid:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
          maxLength: 20
      required:
        - id
        - email
        - password
    Login Request Body:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    New Film Request Body:
      type: object
      properties:
        title:
          type: string
        owner:
          type: string
        private:
          type: boolean
        watchDate:
          type: string
          format: date
        rating:
          type: integer
          minimum: 0
          maximum: 10
        favorite:
          type: boolean
          default: false
      required:
        - owner
        - private
